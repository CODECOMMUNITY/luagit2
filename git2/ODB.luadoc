--
-- Warning: AUTOGENERATED DOCS.
--

--- Class "ODB".
--
-- <br />
module("ODB")

--- Create a new ODB object
--
-- @name ODB.new
-- @return <code>ODB</code> or <code>nil</code> on error.
-- @return Error string.
function ODB.new()
end

--- Create a new ODB object
--
-- @name ODB.open
-- @param object_dir Must be of type `string`.
-- @return <code>ODB</code> or <code>nil</code> on error.
-- @return Error string.
function ODB.open(object_dir)
end

--- Destroy this object.
--
-- @name ODB:free
function ODB:free()
end

--- object method.
--
-- @name ODB:add_backend
-- @param backend Must be of type `ODBBackend`.
-- @param priority Must be of type `integer`.
-- @return <code>true</code> if no error.
-- @return Error string.
function ODB:add_backend(backend, priority)
end

--- object method.
--
-- @name ODB:add_alternate
-- @param backend Must be of type `ODBBackend`.
-- @param priority Must be of type `integer`.
-- @return <code>true</code> if no error.
-- @return Error string.
function ODB:add_alternate(backend, priority)
end

--- object method.
--
-- @name ODB:read
-- @param id Must be of type `OID`.
-- @return <code>OdbObject</code> or <code>nil</code> on error.
-- @return Error string.
function ODB:read(id)
end

--- object method.
--
-- @name ODB:read_prefix
-- @param short_id Must be of type `OID`.
-- @param len Must be of type `integer`.
-- @return <code>OdbObject</code> or <code>nil</code> on error.
-- @return Error string.
function ODB:read_prefix(short_id, len)
end

--- object method.
--
-- @name ODB:read_header
-- @param id Must be of type `OID`.
-- @return <code>integer</code> or <code>nil</code> on error.
-- @return <code>string</code> or <code>nil</code> on error.
-- @return Error string.
function ODB:read_header(id)
end

--- object method.
--
-- @name ODB:exists
-- @param id Must be of type `OID`.
-- @return <code>true</code> if no error.
-- @return Error string.
function ODB:exists(id)
end

--- object method.
--
-- @name ODB:write
-- @param data1 Must be of type `string`.
-- @param type Must be of type `string`.
-- @return <code>OID</code> or <code>nil</code> on error.
-- @return Error string.
function ODB:write(data1, type)
end

--- module function
--
-- @name ODB.hash
-- @param data2 Must be of type `string`.
-- @param otype Must be of type `integer`.
-- @return <code>OID</code> or <code>nil</code> on error.
-- @return Error string.
function ODB.hash(data2, otype)
end

--- module function
--
-- @name ODB.hashfile
-- @param path Must be of type `string`.
-- @param otype Must be of type `integer`.
-- @return <code>OID</code> or <code>nil</code> on error.
-- @return Error string.
function ODB.hashfile(path, otype)
end

